package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal TokenC3D MAYOR, MENOR, MAYORQUE, MENORQUE, IGUAL, DISTINTO, OR, AND, NOT;
nonterminal NodoC3D inicial, log,rel,oprel,arit,val;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left MAYOR, MENOR, MAYORQUE, MENORQUE, IGUAL, DISTINTO;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} log:exp 
                    {:  
                        ControlC3D.agregarC3D(exp.getCad());                       
                        ControlC3D.agregarEtqV(exp.getEtqV());
                        ControlC3D.agregarEtqF(exp.getEtqF());
                    :};


log ::= log:izq AND log:der
            {:
                String c3d = izq.getCad();
                c3d += izq.getEtqV() + ":\n";
                c3d += der.getCad() + "\n";
                ControlC3D.agregarC3D(c3d);
                RESULT = new NodoC3D("",der.getEtqV(),izq.getEtqF()+","+der.getEtqF());
            :}
        |log:izq OR log:der
            {:
                String c3d = izq.getCad();
                c3d += izq.getEtqF() + ":\n";
                c3d += der.getCad() + "\n";
                ControlC3D.agregarC3D(c3d);
                RESULT = new NodoC3D("",izq.getEtqV()+","+der.getEtqV(),der.getEtqF());
            :}
        |NOT log:der
            {:
                String c3d = der.getCad();
                ControlC3D.agregarC3D(c3d);
                RESULT = new NodoC3D("",der.getEtqF(),der.getEtqV());
            :}
        |rel:rel {: RESULT = rel; :}
        ;

rel ::= arit:izq oprel:oprel arit:der 
            {:
                String etiquetaV = ControlC3D.generarEtiqueta();
                String etiquetaF = ControlC3D.generarEtiqueta();
                String c3d = "if "+izq.getCad()+ oprel.getCad() + der.getCad() +" goto "+etiquetaV+" : \n";
                c3d += "goto " + etiquetaF +" : \n";
                RESULT = new NodoC3D(c3d,etiquetaV, etiquetaF);
            :}
        |arit:arit {: RESULT = arit; :}
        ;

oprel ::= MAYOR {: RESULT = new NodoC3D(">"); :}
        | MENOR {: RESULT = new NodoC3D("<"); :}
        | IGUAL {: RESULT = new NodoC3D("=="); :}
        | DISTINTO {: RESULT = new NodoC3D("!="); :}
        | MAYORQUE {: RESULT = new NodoC3D(">="); :}
        | MENORQUE {: RESULT = new NodoC3D("<="); :}
        ;

arit ::= arit:izq MAS arit:der
            {: 
                String temp = ControlC3D.generaTemp();
                String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                ControlC3D.agregarC3D(c3d);
                RESULT = new NodoC3D(temp); 
            :}
        |arit:izq MENOS arit:der
            {: 
                String temp = ControlC3D.generaTemp();
                String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                ControlC3D.agregarC3D(c3d);
                RESULT = new NodoC3D(temp); 
            :}
        |arit:izq MULT arit:der
            {: 
                String temp = ControlC3D.generaTemp();
                String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                ControlC3D.agregarC3D(c3d);
                RESULT = new NodoC3D(temp); 
            :}
        |arit:izq DIV arit:der
            {: 
                String temp = ControlC3D.generaTemp();
                String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                ControlC3D.agregarC3D(c3d);
                RESULT = new NodoC3D(temp); 
            :}
        |arit:izq POT arit:der
            {: 
                String temp = ControlC3D.generaTemp();
                String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                ControlC3D.agregarC3D(c3d);
                RESULT = new NodoC3D(temp); 
            :}
        |MENOS arit:exp
            {: 
                String temp = ControlC3D.generaTemp();
                String c3d = temp + " = - " + exp.getCad() + ";\n";
                ControlC3D.agregarC3D(c3d);
                RESULT = new NodoC3D(temp); 
            :}
        |PAR_IZQ log:exp PAR_DER {: RESULT = exp; :}
        |val:val {: RESULT = val; :}
        ;

val ::= ID:id {: RESULT = new NodoC3D(id); :}
        |ENTERO:entero {: RESULT = new NodoC3D(entero); :}
        |DECIMAL:decimal {: RESULT = new NodoC3D(decimal); :}
        ;
